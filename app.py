import json
import pandas as pd
import streamlit as st
from pathlib import Path

import src.utils.helpers as h
from src.logic.optimizer import compute_builds
from src.logic.exporter import ExcelExporter
from src.utils.spinner_utils import run_with_dynamic_spinner
from src.ui.components import display_results, render_header
from src.utils.constants import preset_map, build_label_alt, build_label_det


def optimization_page() -> None:
    settings = h.Settings()

    presets = ["(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"] + list(preset_map.keys())
    sel = st.selectbox("–ü—Ä–µ—Å–µ—Ç —Ä–∞–Ω–≥–∞", presets, index=0, key="rank_preset")

    if sel in preset_map:
        cfg = preset_map[sel]
        settings.tier = cfg["tier"]
        settings.num_slots = cfg["num_slots"]
        settings.blacklist = cfg["blacklist"]
        settings.max_copy = cfg["max_copy"]

    with st.form("opt_form", clear_on_submit=False):
        st.subheader("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        c1, c2 = st.columns(2, gap="large")
        with c1:
            settings.num_slots = st.number_input(
                "–°–ª–æ—Ç–æ–≤", 1, 24, settings.num_slots, key="slots_basic"
            )
            settings.max_copy = st.number_input(
                "–ú–∞–∫—Å–∏–º—É–º –∫–æ–ø–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞", 1, 5, settings.max_copy, key="max_copy_basic",
                help="–£–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–±–æ—Ä–∫–µ."
            )
        with c2:
            settings.tier = st.number_input(
                "–¢–∏—Ä", 1, 4, settings.tier, key="tier_basic"
            )
            bl_raw = st.text_input(
                "–ò—Å–∫–ª—é—á–∏—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
                ", ".join(settings.blacklist),
                help="–°–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ —Å–±–æ—Ä–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–î—É—à–∞, –ü—É—Å—Ç—ã—à–∫–∞¬ª (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫).",
                key="blacklist_basic"
            )

        with st.expander("üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–π—Å—Ç–≤", expanded=False):
            props = h.Props.load(
                f"props/props_tier{settings.tier}.yaml",
                settings.num_slots
            )
            x1, x2 = st.columns(2, gap="large")
            with x1:
                settings.alt_cnt = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤", 0, 20,
                    value=settings.alt_cnt, step=1,
                    help="–°–∫–æ–ª—å–∫–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –±–∏–ª–¥–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"
                )
            with x2:
                settings.alt_jitter = st.number_input(
                    "–í–∞—Ä—å–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã", 0.0, 1.0,
                    value=settings.alt_jitter, step=0.01,
                    help="–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤"
                )

            settings.recompute()

            df = h.props_to_df(props)
            df_editor = st.data_editor(
                df, num_rows="fixed", hide_index=True, use_container_width=True,
                column_config={
                    "Use": st.column_config.CheckboxColumn(
                        "–£—á–∏—Ç—ã–≤–∞–µ–º",
                        help='–í–∫–ª—é—á–∏—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –ø–æ–¥–±–æ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.'),
                    "Property": st.column_config.TextColumn(
                        "–°–≤–æ–π—Å—Ç–≤–æ", disabled=True,
                        help='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ–¥–∞, –≤–æ–¥–∞, —Ä–∞–¥–∏–∞—Ü–∏—è).'),
                    "Priority": st.column_config.NumberColumn(
                        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                        help='–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ. –ß–µ–º –≤—ã—à–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∏—Ç–æ–≥–æ–≤—É—é —Å–±–æ—Ä–∫—É.',
                        max_value=10),
                    "Min enabled": st.column_config.CheckboxColumn(
                        "–í–∫–ª. –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É?",
                        help='–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–±–æ—Ä–æ–∫.'),
                    "Min": st.column_config.NumberColumn(
                        "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞", step=1,
                        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ —Å–±–æ—Ä–∫–µ.',
                        max_value=100),
                    "Max enabled": st.column_config.CheckboxColumn(
                        "–í–∫–ª. –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É?",
                        help='–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–±–æ—Ä–æ–∫.'),
                    "Max": st.column_config.NumberColumn(
                        "–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞",
                        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ —Å–±–æ—Ä–∫–µ.',
                        max_value=1000),
                },
                key="adv_editor"
            )

            st.session_state["adv_df"] = df_editor

        submitted = st.form_submit_button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–±–æ—Ä")

    if submitted:

        data_path = Path("data/artifacts_data.json")
        all_artifacts = []

        if data_path.exists():
            art_data = json.loads(data_path.read_text(encoding="utf-8"))
            all_artifacts = list(art_data.keys())

        raw_items, info_msg = h.normalize_blacklist_input(bl_raw)
        if info_msg:
            st.info(info_msg)

        valid, invalid = h.validate_blacklist(raw_items, all_artifacts)
        if invalid:
            st.error(
                f"–û, –∫–∞–∫ –ø–µ—á–∞–ª—å–Ω–æ... –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å –∏–º–µ–Ω–∞–º–∏ {', '.join(invalid)} –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ –∑–∞–±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—è—Ç—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è. "
            )
            return

        settings.blacklist = valid

        df2 = st.session_state.get("adv_df")
        if df2 is None:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return

        h.df_to_props(df2, props)

        errors = h.validate_adv_props(df2)
        if errors:
            for e in errors:
                st.error(e)
            return

        st.info("–û, –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

        best, alts = run_with_dynamic_spinner(compute_builds, props, settings)

        st.session_state["best"] = best
        st.session_state["alts"] = alts
        st.session_state["show_builds"] = True

    if st.session_state.get("show_builds"):
        best = st.session_state["best"]
        alts = st.session_state["alts"]
        props_final = h.Props.load(f"props/props_tier{settings.tier}.yaml", settings.num_slots)

        display_results(best, alts, props_final)

        btn_cols = st.columns([1.3, 1, 1.1, 1, 1, 1])

        choice = btn_cols[0].selectbox(
            "–ë–∏–ª–¥",
            [build_label_det] + [f"{build_label_alt} {a['run']}" for a in alts],
            key="result_build_choice",
            label_visibility="collapsed"
        )

        if btn_cols[1].button("–ü–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–¥ –Ω–∏–∂–µ", key="show_build_button"):
            st.session_state["show_table"] = True

        build_map = {
            f"{build_label_det}": best.get("build", {}),
            **{f"{build_label_alt} {a['run']}": a.get("build", {}) for a in alts}
        }
        build = build_map[choice]

        txt = "\n".join(f"{k}\t{v}" for k, v in build.items())
        btn_cols[2].download_button(
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∏–ª–¥ –≤ TXT",
            txt,
            file_name=f"build_{choice.lower().replace(' ', '_')}.txt",
            mime="text/plain"
        )

        exporter = ExcelExporter(settings, list(props_final.data.keys()))
        excel_bytes = exporter.build_bytes(best, alts)
        btn_cols[4].download_button(
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—ë –≤ Excel",
            excel_bytes,
            file_name="comparison_builds.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

        if btn_cols[5].button("–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", key="reset_button"):
            for k in ("best", "alts", "show_builds", "show_table"):
                st.session_state.pop(k, None)
            st.rerun()

        if st.session_state.get("show_table", False):
            df_build = pd.DataFrame(build.items(), columns=["–ê—Ä—Ç–µ—Ñ–∞–∫—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
            st.table(df_build)


def main() -> None:
    st.set_page_config(
        page_title="–ê—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–π –ª–∞–∫–µ–π",
        layout="wide",
        initial_sidebar_state="collapsed"
    )

    css = Path("assets/styles.css").read_text()
    st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)

    render_header()

    with st.sidebar:
        st.markdown(
            "<div style='padding: 20px 10px 10px;'><h2 style='margin: 0; font-size: 28px;'>–ù–∞–≤–∏–≥–∞—Ü–∏—è</h2></div>",
            unsafe_allow_html=True
        )
        st.markdown("<div style='margin-bottom: 10px;'></div>", unsafe_allow_html=True)

        if st.button("üèπ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–æ–∫", key="nav_opt"):
            st.session_state["page"] = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–æ–∫"
        if st.button("üìñ –û –ø—Ä–æ–µ–∫—Ç–µ", key="nav_about"):
            st.session_state["page"] = "–û –ø—Ä–æ–µ–∫—Ç–µ"

    page = st.session_state.get("page", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–æ–∫")

    if page == "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–æ–∫":
        optimization_page()
    elif page == "–û –ø—Ä–æ–µ–∫—Ç–µ":
        readme = Path("README.md").read_text(encoding="utf-8")
        st.markdown(readme, unsafe_allow_html=True)

    st.markdown(f"""
    <hr class="site-footer-hr">
    <div class="site-footer">
      {h.get_random_footer_phrase()} ‚Äî <b>HailSolus</b>
    </div>
    """, unsafe_allow_html=True)


if __name__ == "__main__":
    main()
